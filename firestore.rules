rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function keys(keys) {
      return request.resource.data.keys().hasOnly(keys);
    }
    function editableKeys(keys) {
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(keys);
    }

    match /users/{userId} {
      function isOwner() {
        return request.auth.uid == userId;
      }

      function settingsIsValid() {
        let settings = request.resource.data.settings;
        return settings is map
            && settings.keys().hasOnly(['blockUnsignedMessages', 'airplaneMode'])
            && settings.blockUnsignedMessages is bool
            && settings.airplaneMode is bool;
      }
      function userIsValid() {
        let data = request.resource.data;
        return keys(['uid', 'username', 'displayName', 'photoURL', 'gender', 'verified', 'username', 'settings'])
            && data.uid == request.auth.uid
            && data.verified is bool
            && (!('gender' in data) || data.gender in [null, 'male', 'female'])
            && (!('username' in data) || data.username is string)
            && (!('displayName' in data) || data.displayName is string)
            && (!('photoURL' in data) || data.photoURL is string)
            && settingsIsValid();
      }

      allow get: if true;
      allow list: if request.query.limit == 1;
      allow create: if isOwner()
                    && userIsValid();
      allow update: if isOwner()
                    && userIsValid()
                    && editableKeys(['displayName', 'photoURL', 'settings', 'gender']);

      match /messages/{messageId} {
        allow read: if isOwner();
      }

      match /who_requests/{requestId} {
        allow read, delete: if isOwner();
      }
    }

    match /devices/{token} {
      function userIdIsValid() {
        return request.auth.uid == request.resource.data.userId;
      }
      function tokenIsValid() {
        return token == request.resource.data.token;
      }
      function isOwner() {
        return request.auth.uid == resource.data.userId;
      }

      allow create: if keys(['token', 'userId']) 
                    && tokenIsValid()
                    && userIdIsValid();
      allow update: if keys(['token', 'userId'])
                    && tokenIsValid()
                    && userIdIsValid()
                    && isOwner();
      allow delete: if isOwner();
    }

    match /messages/{messageId} {
      function isReciever() {
        return resource.data.to.uid == request.auth.uid;
      }
      function isAuthor() {
        return resource.data.from.uid == request.auth.uid
            || exists(/databases/$(database)/documents/users/$(request.auth.uid)/messages/$(messageId));
      }
      allow update: if isReciever()
                    && editableKeys(['love']);
      allow read, delete: if isAuthor()
                          || isReciever();
    }
  }
}