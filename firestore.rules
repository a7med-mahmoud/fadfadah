rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /non_existing/{id} {
      allow read;
    }
    match /users/{userId} {
      function isTheUser() {
        return request.auth.uid == userId;
      }
      allow read: if isTheUser();

      function blockUnsignedMessagesIsValid() {
        return request.resource.data.settings.blockUnsignedMessages is bool;
      }

      function airplaneModeIsValid() {
        return request.resource.data.settings.airplaneMode is bool;
      }

      allow create, update: if isTheUser() &&
        airplaneModeIsValid() &&
        blockUnsignedMessagesIsValid();

      match /messages/{messageId} {
        allow read: if isTheUser();
      }
    }

    match /usernames/{username} {
      function isUsernameOfTheUser() {
        return request.auth.uid == resource.data.userId;
      }
      allow read: if isUsernameOfTheUser();
    }

    match /verified_users/{userId} {
      function userIsCheckingHimSelf() {
        return request.auth.uid == userId;
      }

      allow read: if userIsCheckingHimSelf();
    }

    match /devices/{token} {
      function userIdIsValid() {
        return request.auth.uid == request.resource.data.userId;
      }
      function tokenIsValid() {
        return token == request.resource.data.token;
      }
      function userIsTheOwner() {
        return request.auth.uid == resource.data.userId;
      }
      allow create: if tokenIsValid() &&
        userIdIsValid();
      allow update: if tokenIsValid() &&
        userIdIsValid() &&
        userIsTheOwner();
      allow delete: if userIsTheOwner();
    }

    match /messages/{messageId} {
      function userIsReciever() {
        return resource.data.to == request.auth.uid;
      }
      function userIsAuthor() {
        return exists(/databases/$(database)/documents/users/$(request.auth.uid)/messages/$(messageId));
      }
      // Reading a Message
      allow read: if userIsAuthor() ||
        userIsReciever();

      function toIsNotEdited() {
        return resource.data.to == request.resource.data.to;
      }
      function contentIsNotEdited() {
        return resource.data.content == request.resource.data.content;
      }
      function createdAtIsNotEdited() {
        return resource.data.createdAt == request.resource.data.createdAt;
      }

      // Allow Reciever to edit the Love state
      allow update: if userIsReciever() &&
        toIsNotEdited() &&
        contentIsNotEdited() &&
        createdAtIsNotEdited();

      // Allow Author & Reciever to delete a message
      allow delete: if userIsAuthor() || userIsReciever();
    }
  }
}